<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XiaoHou Blog</title>
  
  <subtitle>You&#39;re Welcome</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.xiaohoutongxue.cn/"/>
  <updated>2018-04-10T04:08:47.932Z</updated>
  <id>http://www.xiaohoutongxue.cn/</id>
  
  <author>
    <name>xiaoHou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>自定义View初使用-自定义开关</title>
    <link href="http://www.xiaohoutongxue.cn/2018/04/09/%E8%87%AA%E5%AE%9A%E4%B9%89View/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%80%E5%85%B3/"/>
    <id>http://www.xiaohoutongxue.cn/2018/04/09/自定义View/自定义开关/</id>
    <published>2018-04-09T07:43:28.000Z</published>
    <updated>2018-04-10T04:08:47.932Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><h5 id="一直觉得自己在自定义View上边花的功夫很少，平时开发中用的最多的也是组合控件要不就是别人的轮子。俗话说得好嘛不想当将军的士兵不是好士兵那么不想自己造轮子的Android开发者怎么会是一个好的开发者呢？我和很多人一样都没有系统去学习过自定义View，本篇博客是我借鉴黑马教程的自定义控件写的不是很难我相信每个人都能看懂。"><a href="#一直觉得自己在自定义View上边花的功夫很少，平时开发中用的最多的也是组合控件要不就是别人的轮子。俗话说得好嘛不想当将军的士兵不是好士兵那么不想自己造轮子的Android开发者怎么会是一个好的开发者呢？我和很多人一样都没有系统去学习过自定义View，本篇博客是我借鉴黑马教程的自定义控件写的不是很难我相信每个人都能看懂。" class="headerlink" title="一直觉得自己在自定义View上边花的功夫很少，平时开发中用的最多的也是组合控件要不就是别人的轮子。俗话说得好嘛不想当将军的士兵不是好士兵那么不想自己造轮子的Android开发者怎么会是一个好的开发者呢？我和很多人一样都没有系统去学习过自定义View，本篇博客是我借鉴黑马教程的自定义控件写的不是很难我相信每个人都能看懂。"></a>一直觉得自己在自定义View上边花的功夫很少，平时开发中用的最多的也是组合控件要不就是别人的轮子。俗话说得好嘛不想当将军的士兵不是好士兵那么不想自己造轮子的Android开发者怎么会是一个好的开发者呢？我和很多人一样都没有系统去学习过自定义View，本篇博客是我借鉴黑马教程的自定义控件写的不是很难我相信每个人都能看懂。</h5></blockquote><p>先上效果图</p><p><img src="http://p6urtncv1.bkt.clouddn.com/img.png" alt=""></p><p>自定义View可以分为三大类</p><ul><li>组合已有控件</li><li>完全自定义View</li><li>继承已有的控件实现扩展功能</li></ul><p>这里呢我们重点讲完全自定义View，在讲解之前我们来快速了解一下Android界面绘制流程：</p><p>​    <img src="http://p6urtncv1.bkt.clouddn.com/3.png" alt=""></p><p>Android界面绘制重写对应方法按照上边依次执行切记这些都是在onResume之后执行，Android界面由View和ViewGroup组成：</p><ol><li><p>View（单纯的控件,如：EditText、Button等）绘制流程</p><p> onMeasure() (在这个方法里指定自己的宽高) -&gt; onDraw() (绘制自己的内容)</p></li><li><p>ViewGroup（如：LinearLayout等）绘制流程</p><p> onMeasure() (指定自己的宽高, 所有子View的宽高)-&gt; onLayout() (摆放所有子View) -&gt; onDraw() (绘制内容)</p></li></ol><h2 id="接下来开始定义我们的View："><a href="#接下来开始定义我们的View：" class="headerlink" title="接下来开始定义我们的View："></a>接下来开始定义我们的View：</h2><ol><li><p>写一个继承View类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwitchView</span> <span class="keyword">extends</span> <span class="title">View</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SwitchView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SwitchView</span><span class="params">(Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SwitchView</span><span class="params">(Context context, @Nullable AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在继承时可以看到有四个构造方法：    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SwitchView(Context context)  用于代码创建控件</span><br><span class="line">SwitchView(Context context, <span class="meta">@Nullable</span> AttributeSet attrs)  用于在xml里使用，可指定自定义属性</span><br><span class="line">SwitchView(Context context, <span class="meta">@Nullable</span> AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)  用于xml里使用，可指定自定义属性、和样式</span><br><span class="line">SwitchView(Context context, <span class="meta">@Nullable</span> AttributeSet attrs, <span class="keyword">int</span> defStyleAttr, <span class="keyword">int</span> defStyleRes)</span><br></pre></td></tr></table></figure><p>这里我们只需要使用三个构造方法即可。</p></li><li><p>拷贝包含包名的全路径到xml中并在界面中找到该控件设置对应信息</p><ul><li><p>找到控件</p><p>这个都很简单直接用findViewById就可以直接找到就不多说了</p></li></ul></li></ol><ul><li><p>设置信息</p><p><img src="http://p6urtncv1.bkt.clouddn.com/img.png" alt=""></p><p>上边是我们要实现的效果 可以看出只需要配置三种信息即可：设置背景图片、前景图片和开关状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">switchView.setSwitchBackground(R.drawable.switch_background);</span><br><span class="line">switchView.setSwitchSrc(R.drawable.slide_button);</span><br><span class="line">switchView.setSwitchOpen(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><p>我们在继承View的类中创建对应的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 设置滑块图片</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> switch_background</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSwitchSrc</span><span class="params">(<span class="keyword">int</span> switch_background)</span> </span>&#123;</span><br><span class="line">       imgSrc = BitmapFactory.decodeResource(getResources(), switch_background);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 设置背景</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> switch_background</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSwitchBackground</span><span class="params">(<span class="keyword">int</span> switch_background)</span> </span>&#123;</span><br><span class="line">       imgBg = BitmapFactory.decodeResource(getResources(),switch_background);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSwitchOpen</span><span class="params">(<span class="keyword">boolean</span> isOpen)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.isOpen = isOpen;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>这里我们是通过上边我们自己传入的默认开关状态设置滑块位置，left是当前控件左上角坐标，使用背景宽度-滑块宽度刚好就是左上角坐标位置。大家自己也可以看到我们的UI现在画好了，接下来我们来实现触摸反馈。</p></li></ul><ol start="3"><li><p>设置控件的宽度和高度（测量）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//设置宽度和高度</span></span><br><span class="line">       setMeasuredDimension(imgBg.getWidth(),imgBg.getHeight());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>然后我们类中重写onDraw方法（绘制）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//绘制背景</span></span><br><span class="line">canvas.drawBitmap(imgBg,<span class="number">0</span>,<span class="number">0</span>,paint);</span><br><span class="line"><span class="comment">//绘制滑块</span></span><br><span class="line"><span class="keyword">if</span> (isOpen) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//滑块滑动位置大小</span></span><br><span class="line">    <span class="keyword">int</span> left = imgBg.getWidth() - imgSrc.getWidth();</span><br><span class="line">    canvas.drawBitmap(imgSrc, left, <span class="number">0</span>, paint);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    canvas.drawBitmap(imgSrc, <span class="number">0</span>, <span class="number">0</span>, paint);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>点击事件（触摸反馈）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">switch</span> (event.getAction())&#123;</span><br><span class="line">           <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">               <span class="comment">//记录当前位置</span></span><br><span class="line">               switchState = <span class="keyword">true</span>;</span><br><span class="line">               currentX = event.getX();</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">               currentX = event.getX();</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">               switchState = <span class="keyword">false</span>;</span><br><span class="line">               currentX = event.getX();</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">default</span>:</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//重新绘制界面</span></span><br><span class="line">       invalidate();</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>这里我们使用currentX 记录当前位置，并且给了一个boolean值记录了状态，然后在onDraw中重新写一下逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (switchState)&#123;</span><br><span class="line">           canvas.drawBitmap(imgSrc, currentX, <span class="number">0</span>, paint);</span><br><span class="line">       &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (isOpen) &#123;</span><br><span class="line">               <span class="keyword">int</span> left = imgBg.getWidth() - imgSrc.getWidth();</span><br><span class="line">               canvas.drawBitmap(imgSrc, left, <span class="number">0</span>, paint);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               canvas.drawBitmap(imgSrc, <span class="number">0</span>, <span class="number">0</span>, paint);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>这时我们就可以滑动了，这时我们发现滑块可以一直往左边滑动一直往右边滑动，这时我们则需要控制滑块位置避免滑出背景，上述代码第二行上加入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据当前用户触摸到的位置画滑块</span></span><br><span class="line"><span class="comment">// 让滑块向左移动自身一半大小的位置</span></span><br><span class="line"><span class="keyword">float</span> newLeft = currentX - slideButtonBitmap.getWidth() / <span class="number">2.0f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> maxLeft = switchBackgroupBitmap.getWidth() - slideButtonBitmap.getWidth();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 限定滑块范围</span></span><br><span class="line"><span class="keyword">if</span>(newLeft &lt; <span class="number">0</span>)&#123;</span><br><span class="line">newLeft = <span class="number">0</span>; <span class="comment">// 左边范围</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (newLeft &gt; maxLeft) &#123;</span><br><span class="line">newLeft = maxLeft; <span class="comment">// 右边范围</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">canvas.drawBitmap(slideButtonBitmap, newLeft, <span class="number">0</span>, paint);</span><br></pre></td></tr></table></figure><p>控制滑块滑动结束后的位置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> center = switchBackgroupBitmap.getWidth() / <span class="number">2.0f</span>;</span><br><span class="line"><span class="comment">// 根据当前按下的位置, 和控件中心的位置进行比较. </span></span><br><span class="line"><span class="keyword">boolean</span> state = currentX &gt; center;</span><br><span class="line"><span class="comment">// 如果开关状态变化了, 通知界面. 里边开关状态更新了.</span></span><br><span class="line"><span class="keyword">if</span>(state != mSwitchState &amp;&amp; onSwitchStateUpdateListener != <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="comment">// 把最新的boolean, 状态传出去了</span></span><br><span class="line">onSwitchStateUpdateListener.onStateUpdate(state);</span><br><span class="line">&#125;</span><br><span class="line">mSwitchState = state;</span><br></pre></td></tr></table></figure></li><li><p>自定义监听</p><ul><li><p>声明接口对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnSwitchUpdateListener</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onSwitchUpdateListener</span><span class="params">(<span class="keyword">boolean</span> state)</span></span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>添加设置接口对象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> OnSwitchUpdateListener onSwitchUpdateListener = <span class="keyword">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnSwitchUpdateListener</span><span class="params">(OnSwitchUpdateListener onSwitchUpdateListener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.onSwitchUpdateListener = onSwitchUpdateListener;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>在适合的位置执行接口方法（这里因为是自己自定义View我们在触摸方法总执行）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">     switchState = <span class="keyword">false</span>;</span><br><span class="line">     currentX = event.getX();</span><br><span class="line">     <span class="keyword">float</span> center = imgBg.getWidth() / <span class="number">2.0f</span>;</span><br><span class="line">     <span class="comment">//记录变化</span></span><br><span class="line">     <span class="keyword">boolean</span> state = currentX &gt; center;</span><br><span class="line">     <span class="comment">//设置监听</span></span><br><span class="line">     <span class="keyword">if</span> (isOpen != state &amp;&amp; onSwitchUpdateListener !=<span class="keyword">null</span>) &#123;</span><br><span class="line">      onSwitchUpdateListener.onSwitchUpdateListener(state);</span><br><span class="line">         &#125;</span><br><span class="line">      isOpen = state;</span><br><span class="line">       <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure></li><li><p>界面收到事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">switchView.setOnSwitchUpdateListener(<span class="keyword">new</span> SwitchView.OnSwitchUpdateListener() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSwitchUpdateListener</span><span class="params">(<span class="keyword">boolean</span> state)</span> </span>&#123;</span><br><span class="line">               Log.e(TAG,state+<span class="string">"----&gt;"</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>自定义属性（通过这个设置我们就可以直接在布局文件中直接赋值了）</p><ul><li><p>创建attrs并在attrs.xml声明节点declare-styleable（参照系统View的attrs）</p><p>属性解释</p><p>|  名称  | 说明 |            例            |<br>| :—-: | :–: | :———————-: |<br>|  name  | 名称 | name=”switch_background” |<br>| format | 类型 |    format=”reference”    |</p><p>format属性说明</p><p>|   名称    |           说明           |<br>| :——-: | :———————-: |<br>| reference | 表示引用，参考某一资源ID |<br>|  string   |          字符串          |<br>|   color   |          颜色值          |<br>| dimension |           尺寸           |<br>|  boolean  |           布尔           |<br>|  integer  |           整型           |<br>|   float   |          浮点数          |<br>| fraction  |          百分数          |<br>|   enum    |           枚举           |<br>|   flag    |        表示位运算        |</p><p>例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"SwitchView"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"switch_background"</span> <span class="attr">format</span>=<span class="string">"reference"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"switch_src"</span> <span class="attr">format</span>=<span class="string">"reference"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"switch_state"</span> <span class="attr">format</span>=<span class="string">"boolean"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在xml配置声明的属性，添加命名空间</p><p>命名空间声明：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:android="http://schemas.android.com/apk/res/android"</span><br></pre></td></tr></table></figure><p>参照系统格式我总结出格式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:自己随意写="http://schemas.android.com/apk/res/项目包名"</span><br></pre></td></tr></table></figure></li><li><p>在构造函数中获取并使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SwitchView</span><span class="params">(Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>(context, attrs);</span><br><span class="line">       <span class="comment">//声明命名空间</span></span><br><span class="line">String name = <span class="string">"http://schemas.android.com/apk/res/com.example.administrator.customview"</span>;</span><br><span class="line">       isOpen = attrs.getAttributeBooleanValue(name,<span class="string">"switch_state"</span>,<span class="keyword">false</span>);</span><br><span class="line">       setSwitchOpen(isOpen);</span><br><span class="line">       <span class="keyword">int</span> background = attrs.getAttributeResourceValue(name,<span class="string">"switch_background"</span>,-<span class="number">1</span>);</span><br><span class="line">       setSwitchBackground(background);</span><br><span class="line">       <span class="keyword">int</span> src = attrs.getAttributeResourceValue(name,<span class="string">"switch_src"</span>,-<span class="number">1</span>);</span><br><span class="line">       setSwitchSrc(src);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul><p>这样我们的开关就大功告成啦</p><h5 id="项目地址：-https-github-com-HOUJINZHI-customview-git"><a href="#项目地址：-https-github-com-HOUJINZHI-customview-git" class="headerlink" title="项目地址：    https://github.com/HOUJINZHI/customview.git"></a>项目地址：    <a href="https://github.com/HOUJINZHI/customview.git" target="_blank" rel="noopener">https://github.com/HOUJINZHI/customview.git</a></h5><p>总结：<br>  从上边我们写的看起来也不是很复杂哈，自定义View其实就三个重点测量、绘制和触摸反馈，我的讲解就结束啦，希望通过这篇文章能给你带来帮助。</p></li></ol><blockquote><h4 id="最后献上几篇比较好的自定义View教程"><a href="#最后献上几篇比较好的自定义View教程" class="headerlink" title="最后献上几篇比较好的自定义View教程"></a>最后献上几篇比较好的自定义View教程</h4></blockquote><ul><li><a href="http://www.gcssloop.com/customview/CustomViewIndex" target="_blank" rel="noopener">http://www.gcssloop.com/customview/CustomViewIndex</a></li><li><a href="https://blog.csdn.net/harvic880925/article/details/50995268" target="_blank" rel="noopener">https://blog.csdn.net/harvic880925/article/details/50995268</a> </li><li><a href="http://hencoder.com" target="_blank" rel="noopener">http://hencoder.com</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;h5 id=&quot;一直觉得自己在自定义View上边花的功夫很少，平时开发中用的最多的也是组合控件要不就是别人的轮子。俗话说
      
    
    </summary>
    
      <category term="View" scheme="http://www.xiaohoutongxue.cn/categories/View/"/>
    
    
      <category term="自定义View" scheme="http://www.xiaohoutongxue.cn/tags/%E8%87%AA%E5%AE%9A%E4%B9%89View/"/>
    
  </entry>
  
  <entry>
    <title>程序员Git必备操作-使用Git上传文件到码云</title>
    <link href="http://www.xiaohoutongxue.cn/2018/04/08/Git/%E7%A8%8B%E5%BA%8F%E5%91%98Git%E5%BF%85%E5%A4%87%E6%93%8D%E4%BD%9C-%E4%BD%BF%E7%94%A8Git%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%88%B0%E7%A0%81%E4%BA%91/"/>
    <id>http://www.xiaohoutongxue.cn/2018/04/08/Git/程序员Git必备操作-使用Git上传文件到码云/</id>
    <published>2018-04-08T06:19:31.000Z</published>
    <updated>2018-04-09T08:26:23.477Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>作为一个程序员，你要学会代码的管理，这是一个最基本的修养，就像是一个剑客的剑谱，代码管理，目前流行的是svn和git，但是很不好的是git如果没有插件的话，很多人都不会用git bash 来实现自己的代码管理，自己不断尝试，今天终于总结出一个很好的方法，供各位剑客参考一下，望尔等使用后，脱离天天来回背电脑的苦逼命运。</p></blockquote><h2 id="一、码云配置"><a href="#一、码云配置" class="headerlink" title="一、码云配置"></a>一、码云配置</h2><h5 id="1-使用自己已有的账号创建一个新项目"><a href="#1-使用自己已有的账号创建一个新项目" class="headerlink" title="1.使用自己已有的账号创建一个新项目"></a>1.使用自己已有的账号创建一个新项目</h5><h5 id="2-创建项目"><a href="#2-创建项目" class="headerlink" title="2.创建项目"></a>2.创建项目</h5><h2 id="二、Git操作"><a href="#二、Git操作" class="headerlink" title="二、Git操作"></a>二、Git操作</h2><h5 id="1-下载git"><a href="#1-下载git" class="headerlink" title="1.下载git"></a>1.下载git</h5><p>​    网址：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a> 选择操作系统对应的版本下载即可</p><h5 id="2-安装git"><a href="#2-安装git" class="headerlink" title="2.安装git"></a>2.安装git</h5><p>​    选择自己要安装的的目录安装即可</p><h5 id="3-配置用户名邮箱"><a href="#3-配置用户名邮箱" class="headerlink" title="3.配置用户名邮箱"></a>3.配置用户名邮箱</h5><p>​    git config –global user.name “用户名”</p><p>​        git config –global user.email “邮箱地址”</p><p>​<br>    <img src="https://i.imgur.com/ge7MgHF.png" alt=""></p><h5 id="4-创建本地厂库"><a href="#4-创建本地厂库" class="headerlink" title="4.创建本地厂库"></a>4.创建本地厂库</h5><p>​    git init 初始化git仓库</p><p><img src="https://i.imgur.com/cH1v9t1.png" alt=""></p><h5 id="5-链接远程仓库"><a href="#5-链接远程仓库" class="headerlink" title="5.链接远程仓库"></a>5.链接远程仓库</h5><p>​     git remote add orgin “你的远程仓库地址”（复制链接后记得加 .git）</p><p><img src="https://i.imgur.com/EzkdDSN.png" alt=""></p><h5 id="6-上传代码到码云"><a href="#6-上传代码到码云" class="headerlink" title="6.上传代码到码云"></a>6.上传代码到码云</h5><p>​          git add .</p><p><img src="https://i.imgur.com/nro8UdD.png" alt=""></p><h5 id="7-添加文件注释"><a href="#7-添加文件注释" class="headerlink" title="7.添加文件注释"></a>7.添加文件注释</h5><p>​      git commit -m ‘第一次添加’</p><p><img src="https://i.imgur.com/Wcwl5sS.png" alt=""></p><h5 id="8-上传代码"><a href="#8-上传代码" class="headerlink" title="8.上传代码"></a>8.上传代码</h5><p>​           git push -u origin master 如果上传失败 则使用 git push -u origin master -f  （强制上传文件）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;作为一个程序员，你要学会代码的管理，这是一个最基本的修养，就像是一个剑客的剑谱，代码管理，目前流行的是svn和git，但是很不好的是git如果没有插件的话，很多人都不会用git bash 来实现自己的代码管理，自己不断尝试，今天终于总结出一个很好的
      
    
    </summary>
    
      <category term="Git" scheme="http://www.xiaohoutongxue.cn/categories/Git/"/>
    
    
      <category term="Git" scheme="http://www.xiaohoutongxue.cn/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Hello</title>
    <link href="http://www.xiaohoutongxue.cn/2018/03/29/hello-world/"/>
    <id>http://www.xiaohoutongxue.cn/2018/03/29/hello-world/</id>
    <published>2018-03-29T07:00:51.578Z</published>
    <updated>2018-04-09T08:22:48.917Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎各位大虾来到我的新博客，博客正在开发中请见谅~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;欢迎各位大虾来到我的新博客，博客正在开发中请见谅~&lt;/p&gt;

      
    
    </summary>
    
      <category term="hello" scheme="http://www.xiaohoutongxue.cn/categories/hello/"/>
    
    
      <category term="Hello" scheme="http://www.xiaohoutongxue.cn/tags/Hello/"/>
    
  </entry>
  
</feed>
